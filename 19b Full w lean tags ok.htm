<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

<script src="https://d3js.org/d3.v7.min.js"></script>

<style>
  body { margin: 0; font-family: sans-serif; overflow: hidden; }
  svg { width: 100vw; height: 85vh; touch-action: none; background-color: #f9f9f9; }
  #controls {
    position: absolute;
    top: 5px;
    left: 5px;
    z-index: 10;
    font-size: 18px;
  }
  #contextMenu {
    position: absolute;
    background: #eee;
    border: 2px solid #888;
    display: none;
    z-index: 100;
    font-size: 18px;
  }
  #contextMenu button {
    display: block;
    width: 180px;
    padding: 8px;
    border: none;
    background: none;
    text-align: left;
  }
  #contextMenu button:hover {
    background: #ccc;
  }
  button, input[type="file"] {
    font-size: 16px;
    padding: 6px;
    margin-right: 5px;
  }
</style>
</head>


<body>
  <div id="controls">
    <input type="file" id="fileInput" accept=".opml">

<!--s-->
    <button id="saveButton">Save OPML</button>
<!--e-->

    <label>Node Scale:
      <input type="range" id="scaleSlider" min="0.1" max="2" step="0.1" value="1" style="width: 100%;">
    </label>

    <label>Line thickness:
      <input type="range" id="strokeSlider" min="1" max="3" step="0.1" value="1" style="width: 100%;">
    </label>

    <button id="refreshButton">Refresh Tree</button>
  </div>

  <svg xmlns="http://www.w3.org/2000/svg" id="tree"></svg>

  <textarea id="debug" rows="5" cols="80" style="font-size: 1em;"></textarea>

  <div id="contextMenu" style="position: absolute; display: none; background-color: #ccc; border: 1px solid black; z-index: 10;">
    <div id="addChild">Add child</div>
<!--s-->
    <div id="renameNode">Rename node</div>
    <div id="deleteNode">Delete node</div>
    <div id="showChildrenOnly">Show children only</div>
    <div id="showAllDescendants">Show descendants</div>
    <div id="hideAllDescendants">Hide descendants</div>
    <div id="cutNode">Cut</div>
    <div id="pasteNode">Paste</div>
<!--e-->
  </div>


<script>
try {
  function dbg(...args) {
    const debugArea = document.getElementById('debug');
    if (!debugArea) return;
    debugArea.value += args.map(a => (typeof a === 'object' ? JSON.stringify(a, null, 2) : a)).join(' ') + '\n';
    debugArea.scrollTop = debugArea.scrollHeight;
  }

  dbg("OPML Editor v18y started");

  const svg = d3.select("svg");
  const g = svg.append("g");
  const contextMenu = document.getElementById("contextMenu");
  let selectedNode = null;
  let treeRoot = null;
  let pasteBuffer = null;

  const zoom = d3.zoom()
      .scaleExtent([0.2, 10])
      .on("zoom", (event) => g.attr("transform", event.transform));
  svg.call(zoom)
     .call(zoom.transform, d3.zoomIdentity.scale(0.8));

  document.getElementById("fileInput").addEventListener("change", (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => {
        try {
          const parser = new DOMParser();
          const xml = parser.parseFromString(reader.result, "text/xml");
          dbg("OPML file parsed.");
          treeRoot = parseOPML(xml);
          renderTree(treeRoot);
          dbg("Tree rendered.");
        } catch (err) {
          dbg("Error parsing/rendering OPML:", err);
        }
      };
      reader.readAsText(file);
    }
  });


//s
  document.getElementById("saveButton").addEventListener("click", () => {
    if (treeRoot) {
      const opmlString = generateOPML(treeRoot);
      const blob = new Blob([opmlString], {type: "text/xml"});
      const a = document.createElement("a");
      a.href = URL.createObjectURL(blob);
      a.download = "mindmap.opml";
      a.click();
      dbg("OPML saved.");
    } else {
      dbg("No tree to save.");
    }
  });
//e


  // Context menu button handlers with event stopPropagation and preventDefault
          
  document.getElementById("addChild").addEventListener("click", (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (selectedNode) {
      const newName = prompt("Enter name for new child:", "New Node");
      if (newName) {
        if (!selectedNode.children) selectedNode.children = [];
        selectedNode.children.push({ name: newName, children: [], collapsed: false });
        
        selectedNode.collapsed = false;
        renderTree(treeRoot);
      }
    }
    hideContextMenu();
  });

        

<!--s-->
  document.getElementById("renameNode").addEventListener("click", (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (selectedNode) {
      const newName = prompt("Enter new name:", selectedNode.name);
      if (newName) {
        selectedNode.name = newName;
        renderTree(treeRoot);
      }
    }
    hideContextMenu();
  });

  document.getElementById("deleteNode").addEventListener("click", (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (selectedNode && selectedNode !== treeRoot) {
      removeNode(treeRoot, selectedNode);
      renderTree(treeRoot);
    } else {
      alert("Cannot delete the root node.");
    }
    hideContextMenu();
  });

  document.getElementById("showChildrenOnly").addEventListener("click", () => {
   if (selectedNode) {
     function collapseAll(node) {
       if (node !== selectedNode && node.children) {
         node.collapsed = true;
         node.children.forEach(collapseAll);
       } else if (node.children) {
         node.collapsed = false;
         node.children.forEach(collapseAll);
       }
     }
     
     collapseAll(selectedNode);
     selectedNode.collapsed = false;
     renderTree(treeRoot);
     
     dbg(`Showing children of '${selectedNode.name}'`);
   }
   hideContextMenu();
  });

  // Show all descendants
  document.getElementById("showAllDescendants").addEventListener("click", () => {
    if (selectedNode) {
      function expandAll(node) {
        node.collapsed = false;
        if (node.children) {
          node.children.forEach(expandAll);
        }
      }
      expandAll(selectedNode);
      renderTree(treeRoot);
      dbg(`All descendants of '${selectedNode.name}' are shown.`);
    }
    hideContextMenu();
  });

  document.getElementById("hideAllDescendants").addEventListener("click", () => {
    if (selectedNode) {
      function collapseAll(node) {
        node.collapsed = true;
        if (node.children) {
          node.children.forEach(collapseAll);
        }
      }
      collapseAll(selectedNode);
      renderTree(treeRoot);
      dbg(`All descendants of '${selectedNode.name}' are hidden.`);
    }
    hideContextMenu();
  });

  document.getElementById("cutNode").addEventListener("click", (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (selectedNode && selectedNode !== treeRoot) {
      pasteBuffer = deepCopyNode(selectedNode);
      removeNode(treeRoot, selectedNode);
      renderTree(treeRoot);
      dbg(`Cut node '${pasteBuffer.name}'`);
    } else {
      alert("Cannot cut the root node.");
    }
    hideContextMenu();
  });

  document.getElementById("pasteNode").addEventListener("click", (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (!pasteBuffer) {
      alert("Paste buffer is empty.");
      hideContextMenu();
      return;
    }
    if (selectedNode) {
      if (!selectedNode.children) selectedNode.children = [];
      selectedNode.children.push(deepCopyNode(pasteBuffer));
      pasteBuffer = null;
      dbg("Pasted node.");

      //EHR
      selectedNode.collapsed = false;
      renderTree(treeRoot);
    }
    hideContextMenu();
  });
<!--e-->


  // Updated window handlers to check if click was inside contextMenu
  window.addEventListener("click", (event) => {
    if (!contextMenu.contains(event.target)) {
      hideContextMenu();
    }
  });
  
  window.addEventListener("touchstart", (event) => {
    if (!contextMenu.contains(event.target)) {
      hideContextMenu();
    }
  });
        
                
  let nodeScale = 1;
  let strokeWidth = 1;

  document.getElementById("scaleSlider").addEventListener("input", (event) => {
    nodeScale = parseFloat(event.target.value);
    if (treeRoot) renderTree(treeRoot);
  });

  document.getElementById("strokeSlider").addEventListener("input", (event) => {
    strokeWidth = parseFloat(event.target.value);
    if (treeRoot) renderTree(treeRoot);
  });

  document.getElementById("refreshButton").addEventListener("click", () => {
    if (treeRoot) renderTree(treeRoot);
    dbg("Tree refreshed.");
  });



  function hideContextMenu() {
    contextMenu.style.display = "none";
    selectedNode = null;
  }


  function parseOPML(xml) {
    function parseNode(xmlNode) {
      const node = {
        name: xmlNode.getAttribute("text") || "Untitled",
        children: [],
        collapsed: xmlNode.getAttribute("collapsed") === "true"
      };
      const outlines = xmlNode.children;
      for (let i = 0; i < outlines.length; i++) {
        node.children.push(parseNode(outlines[i]));
      }
      return node;
    }

    const body = xml.querySelector("body");
    const outlines = body.querySelectorAll(":scope > outline");
    if (outlines.length === 0) return { name: "Empty OPML", children: [], collapsed: false };
    if (outlines.length === 1) return parseNode(outlines[0]);
    return {
      name: "Root",
      children: Array.from(outlines).map(parseNode),
      collapsed: false
    };
  }
        
        
        
        
  function renderTree(rootData) {
    g.selectAll("*").remove();

    const root = d3.hierarchy(rootData, d => d.collapsed ? null : d.children);
    const treeLayout = d3.tree().nodeSize([120 * nodeScale, 240 * nodeScale]);
    treeLayout(root);
        
    g.selectAll(".link")
      .data(root.links())
      .join("path")
      .attr("class", "link")
      .attr("fill", "none")
      .attr("stroke", "#555")
      .attr("stroke-width", 3 * nodeScale * strokeWidth) // Adjust stroke width based on slider
      .attr("d", d3.linkHorizontal().x(d => d.y).y(d => d.x));
        
    const node = g.selectAll(".node")
      .data(root.descendants())
      .join("g")
      .attr("class", "node")
      .attr("transform", d => `translate(${d.y},${d.x}) scale(${nodeScale})`)
      .on("click", (event, d) => {
        d.data.collapsed = !d.data.collapsed;
        dbg(`Toggled '${d.data.name}' to ${d.data.collapsed}`);
        renderTree(rootData);
        event.stopPropagation();
      })
        .on("contextmenu", (event) => event.preventDefault())
        .on("mousedown touchstart", function(event, d) {
          const pressTimer = setTimeout(() => {
            selectedNode = d.data;
            showContextMenu(event);
          }, 600);
          d3.select(this).on("mouseup touchend", () => clearTimeout(pressTimer));
        });

    node.append("path")
      .attr("d", d => {
        const context = document.createElement("canvas").getContext("2d");
        context.font = `${20 * nodeScale}px sans-serif`;
        const textWidth = context.measureText(d.data.name).width + 30 * nodeScale;
        const width = Math.max(80 * nodeScale, textWidth);
        const height = 40 * nodeScale;
        const r = height / 2;
        return roundedRectPath(-width/2, -r, width, height, r);
      })
        .attr("fill", d => d.children && d.children.length > 0 ? "#66b" : "#999")
        .attr("stroke", "#333")
        .attr("stroke-width", 2 * nodeScale);

    node.append("text")
      .attr("dy", "0.35em")
      .style("text-anchor", "middle")
      .style("font", `${20 * nodeScale}px sans-serif`)
      .style("fill", "white")
      .text(d => d.data.name);
  }

      
  function roundedRectPath(x, y, width, height, radius) {
    return `
      M${x+radius},${y}
      H${x+width-radius}
      A${radius},${radius} 0 0 1 ${x+width-radius},${y+height}
      H${x+radius}
      A${radius},${radius} 0 0 1 ${x+radius},${y}
      Z
  `;
  }


  function showContextMenu(event) {
    event.preventDefault();
    const e = event.touches ? event.touches[0] : event;
    let left = e.clientX;
    let top = e.clientY;
    // Keep menu inside viewport horizontally
    if (left + contextMenu.offsetWidth > window.innerWidth) {
      left = window.innerWidth - contextMenu.offsetWidth - 10;
    }
    // Keep menu inside viewport vertically
    if (top + contextMenu.offsetHeight > window.innerHeight) {
      top = window.innerHeight - contextMenu.offsetHeight - 10;
    }
    contextMenu.style.left = `${left}px`;
    contextMenu.style.top = `${top}px`;
    contextMenu.style.display = "block";
  }


//s
  function removeNode(parent, target) {
    if (!parent.children) return false;
    const index = parent.children.indexOf(target);
    if (index !== -1) {
      parent.children.splice(index, 1);
      return true;
    }
    for (const child of parent.children) {
      if (removeNode(child, target)) return true;
    }
    return false;
  }


  function deepCopyNode(node) {
    return {
      name: node.name,
      collapsed: node.collapsed,
      children: node.children ? node.children.map(deepCopyNode) : []
    };
  }


  function generateOPML(rootNode) {
    function buildOutline(node) {
      const outline = document.createElement("outline");
      outline.setAttribute("text", node.name);
      outline.setAttribute("collapsed", node.collapsed ? "true" : "false");
      if (node.children) {
          node.children.forEach(child => outline.appendChild(buildOutline(child)));
      }
      return outline;
    }
    const opml = document.implementation.createDocument("", "", null);
    const opmlElement = opml.createElement("opml");
    opmlElement.setAttribute("version", "2.0");
    const head = opml.createElement("head");
    const title = opml.createElement("title");
    title.textContent = "Mind Map Export";
    head.appendChild(title);
    const body = opml.createElement("body");
    body.appendChild(buildOutline(rootNode));
    opmlElement.appendChild(head);
    opmlElement.appendChild(body);
    opml.appendChild(opmlElement);
    return new XMLSerializer().serializeToString(opml);
  }
//e


} catch (err) {
  const debugArea = document.getElementById('debug');
  if (debugArea) {
    debugArea.value += "Fatal Error: " + err + '\n';
  } else {
    alert("Fatal Error: " + err);
  }
}

</script>
</body>
</html>

